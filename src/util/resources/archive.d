//          Copyright Gushcha Anton 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
/// Абстракное хранилище ресурсов
/**
*	@file archive.d Интерфейс для реализации унифицированной работы с разными
*	архивами, в том числе и с файловой системой.
*/
module util.resources.archive;

public
{
	import std.stream;
}

/// Абстрактное хранилище ресурсов
/**
*	Это может быть файловая система или zip архив, или другой формат архива. 	
*/
interface Archive
{
	/// Открытие архива
	/**
	*	@par name Полный путь до архива вместе с именем
	*	@par mode Режим открытия архива, некоторые режимы могут
	*	не поддерживаться, тогда вызывается исключение.
	*/
	void open(string name, FileMode mode);

	/// Закрытие архива
	/**
	*	Вызывается также и при удалении объекта. Здесь может 
	*	производится запись данных на диск.
	*/
	void close();

	/// Проверка, открыт ли архив.
	bool isOpened();

	/// Путь до архива
	@property string name();

	/// Проверка на наличие файла
	/**
	*	@par name Имя файла относительно корня архива
	*	@par recursive Рекурсивный поиск по всему архиву
	*/
	bool hasFile(string name, bool recursive=false);

	/// Получение списка файлов
	/**
	*	@par pattern Шаблон, содержащий спец. символы *,& для выбора только нужных файлов
	*	@par recursive Флаг рекурсивного поиска по всем подпапкам архива
	*	@return Список найденных файлов, их полные имена от корня архива
	*/
	string[] getFileList(string pattern="*", bool recursive=false);

	/// Открытие файла для чтения, записи
	/**
	*	@par name Имя файла от корня архива
	*	@par mode Режим открытия файла
	*/
	Stream openFile(string name, FileMode mode);
}

/// Фабрика, которая создает экземпляры Архива
/**
*	Через регистрацию уникального типа фабрики менеджер архивов узнает о новом типе
*	архивов и как их создавать.
*/
interface ArchiveFabric
{
	/// Получение уникального идентификатора типа архива
	/**
	*	Идентификатор используется для загрузки типов хранилищ из файла.
	*/
	string getType();

	/// Создание экземпляра нужного класса архива
	Archive createInstance();
}