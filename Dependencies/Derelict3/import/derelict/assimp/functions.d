/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.assimp.functions;

private
{
    import derelict.assimp.types;
}

extern(C)
{
    alias nothrow const(aiScene)* function(const(char)*, uint) da_aiImportFile;
    alias nothrow const(aiScene)* function(const(char)*, uint, aiFileIO*) da_aiImportFileEx;
    alias nothrow const(aiScene)* function(const(char)*, uint, uint, const(char)*) da_aiImportFileFromMemory;
    alias nothrow const(aiScene)* function(const(aiScene)*, uint) da_aiApplyPostProcessing;
    alias nothrow aiLogStream function(aiDefaultLogStream, const(char)*) da_aiGetPredefinedLogStream;
    alias nothrow void function(const(aiLogStream)*) da_aiAttachLogStream;
    alias nothrow void function(aiBool) da_aiEnableVerboseLogging;
    alias nothrow aiReturn function(const(aiLogStream)*) da_aiDetachLogStream;
    alias nothrow void function() da_aiDetachAllLogStreams;
    alias nothrow void function(const(aiScene)*) da_aiReleaseImport;
    alias nothrow const(char)* function() da_aiGetErrorString;
    alias nothrow aiBool function(const(char)*) da_aiIsExtensionSupported;
    alias nothrow void function(aiString*) da_aiGetExtensionList;
    alias nothrow void function(const(aiScene)*, aiMemoryInfo*) da_aiGetMemoryRequirements;
    alias nothrow void function(const(char)*, int) da_aiSetImportPropertyInteger;
    alias nothrow void function(const(char)*, float) da_aiSetImportPropertyFloat;
    alias nothrow void function(const(char)*, const(aiString)*) da_aiSetImportPropertyString;
    alias nothrow void function(aiQuaternion*, const(aiMatrix3x3)*) da_aiCreateQuaternionFromMatrix;
    alias nothrow void function(const aiMatrix4x4*, aiVector3D*, aiQuaternion*, aiVector3D*) da_aiDecomposeMatrix;
    alias nothrow void function(aiMatrix4x4*) da_aiTransposeMatrix4;
    alias nothrow void function(aiMatrix3x3*) da_aiTransposeMatrix3;
    alias nothrow void function(aiVector3D*, const(aiMatrix3x3)*) da_aiTransformVecByMatrix3;
    alias nothrow void function(aiVector3D*, const(aiMatrix4x4)*) da_aiTransformVecByMatrix4;
    alias nothrow void function(aiMatrix4x4*) da_aiMultiplyMatrix4;
    alias nothrow void function(aiMatrix3x3*) da_aiMultiplyMatrix3;
    alias nothrow void function(aiMatrix3x3*) da_aiIdentityMatrix3;
    alias nothrow void function(aiMatrix4x4*) da_aiIdentityMatrix4;
    alias nothrow const(char)* function() da_aiGetLegalString;
    alias nothrow uint function() da_aiGetVersionMinor;
    alias nothrow uint function() da_aiGetVersionMajor;
    alias nothrow uint function() da_aiGetVersionRevision;
    alias nothrow uint function() da_aiGetCompileFlags;
}

__gshared
{
    da_aiImportFile aiImportFile;
    da_aiImportFileEx aiImportFileEx;
    da_aiImportFileFromMemory aiImportFileFromMemory;
    da_aiApplyPostProcessing aiApplyPostProcessing;
    da_aiGetPredefinedLogStream aiGetPredefinedLogStream;
    da_aiAttachLogStream aiAttachLogStream;
    da_aiEnableVerboseLogging aiEnableVerboseLogging;
    da_aiDetachLogStream aiDetachLogStream;
    da_aiDetachAllLogStreams aiDetachAllLogStreams;
    da_aiReleaseImport aiReleaseImport;
    da_aiGetErrorString aiGetErrorString;
    da_aiIsExtensionSupported aiIsExtensionSupported;
    da_aiGetExtensionList aiGetExtensionList;
    da_aiGetMemoryRequirements aiGetMemoryRequirements;
    da_aiSetImportPropertyInteger aiSetImportPropertyInteger;
    da_aiSetImportPropertyFloat aiSetImportPropertyFloat;
    da_aiSetImportPropertyString aiSetImportPropertyString;
    da_aiCreateQuaternionFromMatrix aiCreateQuaternionFromMatrix;
    da_aiDecomposeMatrix aiDecomposeMatrix;
    da_aiTransposeMatrix4 aiTransposeMatrix4;
    da_aiTransposeMatrix3 aiTransposeMatrix3;
    da_aiTransformVecByMatrix3 aiTransformVecByMatrix3;
    da_aiTransformVecByMatrix4 aiTransformVecByMatrix4;
    da_aiMultiplyMatrix4 aiMultiplyMatrix4;
    da_aiMultiplyMatrix3 aiMultiplyMatrix3;
    da_aiIdentityMatrix3 aiIdentityMatrix3;
    da_aiIdentityMatrix4 aiIdentityMatrix4;
    da_aiGetLegalString aiGetLegalString;
    da_aiGetVersionMinor aiGetVersionMinor;
    da_aiGetVersionMajor aiGetVersionMajor;
    da_aiGetVersionRevision aiGetVersionRevision;
    da_aiGetCompileFlags aiGetCompileFlags;
}
